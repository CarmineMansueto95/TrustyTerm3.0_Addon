/***

    MochiKit.MochiKit 1.5 : PACKED VERSION

    THIS FILE IS AUTOMATICALLY GENERATED.  If creating patches, please
    diff against the source tree, not this file.

    See <http://mochikit.com/> for documentation, downloads, license, etc.

    (c) 2005 Bob Ippolito.  All rights Reserved.

***/

var MochiKit=MochiKit||{};
if(typeof (MochiKit.__export__)=="undefined"){
MochiKit.__export__=true;
}
MochiKit.NAME="MochiKit";
MochiKit.VERSION="1.5";
MochiKit.__repr__=function(){
return "["+this.NAME+" "+this.VERSION+"]";
};
MochiKit.toString=function(){
return this.__repr__();
};
MochiKit.Base=MochiKit.Base||{};
MochiKit.Base.module=function(_1,_2,_3,_4){
var _5=_1[_2]=_1[_2]||{};
var _6=(_1.NAME?_1.NAME+".":"");
_5.NAME=_6+_2;
_5.VERSION=_3;
_5.__repr__=function(){
return "["+this.NAME+" "+this.VERSION+"]";
};
_5.toString=function(){
return this.__repr__();
};
for(var i=0;_4!=null&&i<_4.length;i++){
if(!(_4[i] in _1)){
throw _5.NAME+" depends on "+_6+_4[i]+"!";
}
}
return _5;
};
MochiKit.Base.module(MochiKit,"Base","1.5",[]);
MochiKit.Base.update=function(_8,_9){
if(_8===null||_8===undefined){
_8={};
}
for(var i=1;i<arguments.length;i++){
var o=arguments[i];
if(typeof (o)!="undefined"&&o!==null){
for(var k in o){
_8[k]=o[k];
}
}
}
return _8;
};
MochiKit.Base.update(MochiKit.Base,{camelize:function(_d){
var _e=_d.split("-");
var cc=_e[0];
for(var i=1;i<_e.length;i++){
cc+=_e[i].charAt(0).toUpperCase()+_e[i].substring(1);
}
return cc;
},counter:function(n){
if(arguments.length===0){
n=1;
}
return function(){
return n++;
};
},clone:function(obj){
var me=arguments.callee;
if(arguments.length==1){
me.prototype=obj;
return new me();
}
},_flattenArray:function(res,lst){
for(var i=0;i<lst.length;i++){
var o=lst[i];
if(o instanceof Array){
arguments.callee(res,o);
}else{
res.push(o);
}
}
return res;
},flattenArray:function(lst){
return MochiKit.Base._flattenArray([],lst);
},flattenArguments:function(lst){
var res=[];
var m=MochiKit.Base;
var _1c=m.extend(null,arguments);
while(_1c.length){
var o=_1c.shift();
if(o&&typeof (o)=="object"&&typeof (o.length)=="number"){
for(var i=o.length-1;i>=0;i--){
_1c.unshift(o[i]);
}
}else{
res.push(o);
}
}
return res;
},extend:function(_1f,obj,_21){
if(!_21){
_21=0;
}
if(obj){
var l=obj.length;
if(typeof (l)!="number"){
if(typeof (MochiKit.Iter)!="undefined"){
obj=MochiKit.Iter.list(obj);
l=obj.length;
}else{
throw new TypeError("Argument not an array-like and MochiKit.Iter not present");
}
}
if(!_1f){
_1f=[];
}
for(var i=_21;i<l;i++){
_1f.push(obj[i]);
}
}
return _1f;
},updatetree:function(_24,obj){
if(_24===null||_24===undefined){
_24={};
}
for(var i=1;i<arguments.length;i++){
var o=arguments[i];
if(typeof (o)!="undefined"&&o!==null){
for(var k in o){
var v=o[k];
if(typeof (_24[k])=="object"&&typeof (v)=="object"){
arguments.callee(_24[k],v);
}else{
_24[k]=v;
}
}
}
}
return _24;
},setdefault:function(_2a,obj){
if(_2a===null||_2a===undefined){
_2a={};
}
for(var i=1;i<arguments.length;i++){
var o=arguments[i];
for(var k in o){
if(!(k in _2a)){
_2a[k]=o[k];
}
}
}
return _2a;
},keys:function(obj){
var _30=[];
for(var _31 in obj){
_30.push(_31);
}
return _30;
},values:function(obj){
var _33=[];
for(var _34 in obj){
_33.push(obj[_34]);
}
return _33;
},items:function(obj){
var _36=[];
var e;
for(var _38 in obj){
var v;
try{
v=obj[_38];
}
catch(e){
continue;
}
_36.push([_38,v]);
}
return _36;
},_newNamedError:function(_3a,_3b,_3c){
_3c.prototype=new MochiKit.Base.NamedError(_3a.NAME+"."+_3b);
_3c.prototype.constructor=_3c;
_3a[_3b]=_3c;
},operator:{truth:function(a){
return !!a;
},lognot:function(a){
return !a;
},identity:function(a){
return a;
},not:function(a){
return ~a;
},neg:function(a){
return -a;
},add:function(a,b){
return a+b;
},sub:function(a,b){
return a-b;
},div:function(a,b){
return a/b;
},mod:function(a,b){
return a%b;
},mul:function(a,b){
return a*b;
},and:function(a,b){
return a&b;
},or:function(a,b){
return a|b;
},xor:function(a,b){
return a^b;
},lshift:function(a,b){
return a<<b;
},rshift:function(a,b){
return a>>b;
},zrshift:function(a,b){
return a>>>b;
},eq:function(a,b){
return a==b;
},ne:function(a,b){
return a!=b;
},gt:function(a,b){
return a>b;
},ge:function(a,b){
return a>=b;
},lt:function(a,b){
return a<b;
},le:function(a,b){
return a<=b;
},seq:function(a,b){
return a===b;
},sne:function(a,b){
return a!==b;
},ceq:function(a,b){
return MochiKit.Base.compare(a,b)===0;
},cne:function(a,b){
return MochiKit.Base.compare(a,b)!==0;
},cgt:function(a,b){
return MochiKit.Base.compare(a,b)==1;
},cge:function(a,b){
return MochiKit.Base.compare(a,b)!=-1;
},clt:function(a,b){
return MochiKit.Base.compare(a,b)==-1;
},cle:function(a,b){
return MochiKit.Base.compare(a,b)!=1;
},logand:function(a,b){
return a&&b;
},logor:function(a,b){
return a||b;
},contains:function(a,b){
return b in a;
}},forwardCall:function(_7a){
return function(){
return this[_7a].apply(this,arguments);
};
},itemgetter:function(_7b){
return function(arg){
return arg[_7b];
};
},bool:function(_7d){
if(typeof (_7d)==="boolean"||_7d instanceof Boolean){
return _7d.valueOf();
}else{
if(typeof (_7d)==="string"||_7d instanceof String){
return _7d.length>0&&_7d!="false"&&_7d!="null"&&_7d!="undefined"&&_7d!="0";
}else{
if(typeof (_7d)==="number"||_7d instanceof Number){
return !isNaN(_7d)&&_7d!=0;
}else{
if(_7d!=null&&typeof (_7d.length)==="number"){
return _7d.length!==0;
}else{
return _7d!=null;
}
}
}
}
},typeMatcher:function(){
var _7e={};
for(var i=0;i<arguments.length;i++){
var typ=arguments[i];
_7e[typ]=typ;
}
return function(){
for(var i=0;i<arguments.length;i++){
if(!(typeof (arguments[i]) in _7e)){
return false;
}
}
return true;
};
},isNull:function(){
for(var i=0;i<arguments.length;i++){
if(arguments[i]!==null){
return false;
}
}
return true;
},isUndefinedOrNull:function(){
for(var i=0;i<arguments.length;i++){
var o=arguments[i];
if(!(typeof (o)=="undefined"||o===null)){
return false;
}
}
return true;
},isEmpty:function(obj){
return !MochiKit.Base.isNotEmpty.apply(this,arguments);
},isNotEmpty:function(obj){
for(var i=0;i<arguments.length;i++){
var o=arguments[i];
if(!(o&&o.length)){
return false;
}
}
return true;
},isArrayLike:function(){
for(var i=0;i<arguments.length;i++){
var o=arguments[i];
var typ=typeof (o);
if((typ!="object"&&!(typ=="function"&&typeof (o.item)=="function"))||o===null||typeof (o.length)!="number"||o.nodeType===3||o.nodeType===4){
return false;
}
}
return true;
},isDateLike:function(){
for(var i=0;i<arguments.length;i++){
var o=arguments[i];
if(typeof (o)!="object"||o===null||typeof (o.getTime)!="function"){
return false;
}
}
return true;
},xmap:function(fn){
if(fn===null){
return MochiKit.Base.extend(null,arguments,1);
}
var _8f=[];
for(var i=1;i<arguments.length;i++){
_8f.push(fn(arguments[i]));
}
return _8f;
},map:function(fn,lst){
var m=MochiKit.Base;
var itr=MochiKit.Iter;
var _95=m.isArrayLike;
if(arguments.length<=2){
if(!_95(lst)){
if(itr){
lst=itr.list(lst);
if(fn===null){
return lst;
}
}else{
throw new TypeError("Argument not an array-like and MochiKit.Iter not present");
}
}
if(fn===null){
return m.extend(null,lst);
}
var _96=[];
for(var i=0;i<lst.length;i++){
_96.push(fn(lst[i]));
}
return _96;
}else{
if(fn===null){
fn=Array;
}
var _98=null;
for(var i=1;i<arguments.length;i++){
if(!_95(arguments[i])){
if(itr){
return itr.list(itr.imap.apply(null,arguments));
}else{
throw new TypeError("Argument not an array-like and MochiKit.Iter not present");
}
}
var l=arguments[i].length;
if(_98===null||_98>l){
_98=l;
}
}
_96=[];
for(var i=0;i<_98;i++){
var _9a=[];
for(var j=1;j<arguments.length;j++){
_9a.push(arguments[j][i]);
}
_96.push(fn.apply(this,_9a));
}
return _96;
}
},xfilter:function(fn){
var _9d=[];
if(fn===null){
fn=MochiKit.Base.operator.truth;
}
for(var i=1;i<arguments.length;i++){
var o=arguments[i];
if(fn(o)){
_9d.push(o);
}
}
return _9d;
},filter:function(fn,lst,_a2){
var _a3=[];
var m=MochiKit.Base;
if(!m.isArrayLike(lst)){
if(MochiKit.Iter){
lst=MochiKit.Iter.list(lst);
}else{
throw new TypeError("Argument not an array-like and MochiKit.Iter not present");
}
}
if(fn===null){
fn=m.operator.truth;
}
if(typeof (Array.prototype.filter)=="function"){
return Array.prototype.filter.call(lst,fn,_a2);
}else{
if(typeof (_a2)=="undefined"||_a2===null){
for(var i=0;i<lst.length;i++){
var o=lst[i];
if(fn(o)){
_a3.push(o);
}
}
}else{
for(var i=0;i<lst.length;i++){
o=lst[i];
if(fn.call(_a2,o)){
_a3.push(o);
}
}
}
}
return _a3;
},_wrapDumbFunction:function(_a7){
return function(){
switch(arguments.length){
case 0:
return _a7();
case 1:
return _a7(arguments[0]);
case 2:
return _a7(arguments[0],arguments[1]);
case 3:
return _a7(arguments[0],arguments[1],arguments[2]);
}
var _a8=[];
for(var i=0;i<arguments.length;i++){
_a8.push("arguments["+i+"]");
}
return eval("(func("+_a8.join(",")+"))");
};
},methodcaller:function(_aa){
var _ab=MochiKit.Base.extend(null,arguments,1);
if(typeof (_aa)=="function"){
return function(obj){
return _aa.apply(obj,_ab);
};
}else{
return function(obj){
return obj[_aa].apply(obj,_ab);
};
}
},method:function(_ae,_af){
var m=MochiKit.Base;
return m.bind.apply(this,m.extend([_af,_ae],arguments,2));
},compose:function(f1,f2){
var _b3=[];
var m=MochiKit.Base;
if(arguments.length===0){
throw new TypeError("compose() requires at least one argument");
}
for(var i=0;i<arguments.length;i++){
var fn=arguments[i];
if(typeof (fn)!="function"){
throw new TypeError(m.repr(fn)+" is not a function");
}
_b3.push(fn);
}
return function(){
var _b7=arguments;
for(var i=_b3.length-1;i>=0;i--){
_b7=[_b3[i].apply(this,_b7)];
}
return _b7[0];
};
},bind:function(_b9,_ba){
if(typeof (_b9)=="string"){
_b9=_ba[_b9];
}
var _bb=_b9.im_func;
var _bc=_b9.im_preargs;
var _bd=_b9.im_self;
var m=MochiKit.Base;
if(typeof (_b9)=="function"&&typeof (_b9.apply)=="undefined"){
_b9=m._wrapDumbFunction(_b9);
}
if(typeof (_bb)!="function"){
_bb=_b9;
}
if(typeof (_ba)!="undefined"){
_bd=_ba;
}
if(typeof (_bc)=="undefined"){
_bc=[];
}else{
_bc=_bc.slice();
}
m.extend(_bc,arguments,2);
var _bf=function(){
var _c0=arguments;
var me=arguments.callee;
if(me.im_preargs.length>0){
_c0=m.concat(me.im_preargs,_c0);
}
var _c2=me.im_self;
if(!_c2){
_c2=this;
}
return me.im_func.apply(_c2,_c0);
};
_bf.im_self=_bd;
_bf.im_func=_bb;
_bf.im_preargs=_bc;
if(typeof (_bb.NAME)=="string"){
_bf.NAME="bind("+_bb.NAME+",...)";
}
return _bf;
},bindLate:function(_c3,_c4){
var m=MochiKit.Base;
var _c6=arguments;
if(typeof (_c3)==="string"){
_c6=m.extend([m.forwardCall(_c3)],arguments,1);
return m.bind.apply(this,_c6);
}
return m.bind.apply(this,_c6);
},bindMethods:function(_c7){
var _c8=MochiKit.Base.bind;
for(var k in _c7){
var _ca=_c7[k];
if(typeof (_ca)=="function"){
_c7[k]=_c8(_ca,_c7);
}
}
},registerComparator:function(_cb,_cc,_cd,_ce){
MochiKit.Base.comparatorRegistry.register(_cb,_cc,_cd,_ce);
},_primitives:{"boolean":true,"string":true,"number":true},compare:function(a,b){
if(a==b){
return 0;
}
var _d1=(typeof (a)=="undefined"||a===null);
var _d2=(typeof (b)=="undefined"||b===null);
if(_d1&&_d2){
return 0;
}else{
if(_d1){
return -1;
}else{
if(_d2){
return 1;
}
}
}
var m=MochiKit.Base;
var _d4=m._primitives;
if(!(typeof (a) in _d4&&typeof (b) in _d4)){
try{
return m.comparatorRegistry.match(a,b);
}
catch(e){
if(e!=m.NotFound){
throw e;
}
}
}
if(a<b){
return -1;
}else{
if(a>b){
return 1;
}
}
var _d5=m.repr;
throw new TypeError(_d5(a)+" and "+_d5(b)+" can not be compared");
},compareDateLike:function(a,b){
return MochiKit.Base.compare(a.getTime(),b.getTime());
},compareArrayLike:function(a,b){
var _da=MochiKit.Base.compare;
var _db=a.length;
var _dc=0;
if(_db>b.length){
_dc=1;
_db=b.length;
}else{
if(_db<b.length){
_dc=-1;
}
}
for(var i=0;i<_db;i++){
var cmp=_da(a[i],b[i]);
if(cmp){
return cmp;
}
}
return _dc;
},registerRepr:function(_df,_e0,_e1,_e2){
MochiKit.Base.reprRegistry.register(_df,_e0,_e1,_e2);
},repr:function(o){
if(typeof (o)=="undefined"){
return "undefined";
}else{
if(o===null){
return "null";
}
}
try{
if(typeof (o.__repr__)=="function"){
return o.__repr__();
}else{
if(typeof (o.repr)=="function"&&o.repr!=arguments.callee){
return o.repr();
}
}
return MochiKit.Base.reprRegistry.match(o);
}
catch(e){
try{
if(typeof (o.NAME)=="string"&&(o.toString==Function.prototype.toString||o.toString==Object.prototype.toString)){
return o.NAME;
}
}
catch(ignore){
}
}
try{
var _e4=(o+"");
}
catch(e){
return "["+typeof (o)+"]";
}
if(typeof (o)=="function"){
_e4=_e4.replace(/^\s+/,"").replace(/\s+/g," ");
_e4=_e4.replace(/,(\S)/,", $1");
var idx=_e4.indexOf("{");
if(idx!=-1){
_e4=_e4.substr(0,idx)+"{...}";
}
}
return _e4;
},reprArrayLike:function(o){
var m=MochiKit.Base;
return "["+m.map(m.repr,o).join(", ")+"]";
},reprString:function(o){
return ("\""+o.replace(/(["\\])/g,"\\$1")+"\"").replace(/[\f]/g,"\\f").replace(/[\b]/g,"\\b").replace(/[\n]/g,"\\n").replace(/[\t]/g,"\\t").replace(/[\v]/g,"\\v").replace(/[\r]/g,"\\r");
},reprNumber:function(o){
return o+"";
},registerJSON:function(_ea,_eb,_ec,_ed){
MochiKit.Base.jsonRegistry.register(_ea,_eb,_ec,_ed);
},evalJSON:function(_ee){
return eval("("+MochiKit.Base._filterJSON(_ee)+")");
},_filterJSON:function(s){
var m=s.match(/^\s*\/\*(.*)\*\/\s*$/);
return (m)?m[1]:s;
},serializeJSON:function(o){
var _f2=typeof (o);
if(_f2=="number"||_f2=="boolean"){
return o+"";
}else{
if(o===null){
return "null";
}else{
if(_f2=="string"){
var res="";
for(var i=0;i<o.length;i++){
var c=o.charAt(i);
if(c=="\""){
res+="\\\"";
}else{
if(c=="\\"){
res+="\\\\";
}else{
if(c=="\b"){
res+="\\b";
}else{
if(c=="\f"){
res+="\\f";
}else{
if(c=="\n"){
res+="\\n";
}else{
if(c=="\r"){
res+="\\r";
}else{
if(c=="\t"){
res+="\\t";
}else{
if(o.charCodeAt(i)<=31){
var hex=o.charCodeAt(i).toString(16);
if(hex.length<2){
hex="0"+hex;
}
res+="\\u00"+hex.toUpperCase();
}else{
res+=c;
}
}
}
}
}
}
}
}
}
return "\""+res+"\"";
}
}
}
var me=arguments.callee;
var _f8;
if(typeof (o.toJSON)=="function"){
_f8=o.toJSON();
if(o!==_f8){
return me(_f8);
}
}
if(typeof (o.__json__)=="function"){
_f8=o.__json__();
if(o!==_f8){
return me(_f8);
}
}
if(typeof (o.json)=="function"){
_f8=o.json();
if(o!==_f8){
return me(_f8);
}
}
if(_f2!="function"&&typeof (o.length)=="number"){
var res=[];
for(var i=0;i<o.length;i++){
var val=me(o[i]);
if(typeof (val)!="string"){
continue;
}
res.push(val);
}
return "["+res.join(", ")+"]";
}
var m=MochiKit.Base;
try{
_f8=m.jsonRegistry.match(o);
if(o!==_f8){
return me(_f8);
}
}
catch(e){
if(e!=m.NotFound){
throw e;
}
}
if(_f2=="undefined"){
throw new TypeError("undefined can not be serialized as JSON");
}
if(_f2=="function"){
return null;
}
res=[];
for(var k in o){
var _fc;
if(typeof (k)=="number"){
_fc="\""+k+"\"";
}else{
if(typeof (k)=="string"){
_fc=me(k);
}else{
continue;
}
}
val=me(o[k]);
if(typeof (val)!="string"){
continue;
}
res.push(_fc+":"+val);
}
return "{"+res.join(", ")+"}";
},objEqual:function(a,b){
return (MochiKit.Base.compare(a,b)===0);
},arrayEqual:function(_ff,arr){
if(_ff.length!=arr.length){
return false;
}
return (MochiKit.Base.compare(_ff,arr)===0);
},concat:function(){
var rval=[];
var _102=MochiKit.Base.extend;
for(var i=0;i<arguments.length;i++){
_102(rval,arguments[i]);
}
return rval;
},keyComparator:function(key){
var m=MochiKit.Base;
var _106=m.compare;
if(arguments.length==1){
return function(a,b){
return _106(a[key],b[key]);
};
}
var _109=m.extend(null,arguments);
return function(a,b){
var rval=0;
for(var i=0;(rval===0)&&(i<_109.length);i++){
var key=_109[i];
rval=_106(a[key],b[key]);
}
return rval;
};
},reverseKeyComparator:function(key){
var _110=MochiKit.Base.keyComparator.apply(this,arguments);
return function(a,b){
return _110(b,a);
};
},partial:function(func){
var m=MochiKit.Base;
return m.bind.apply(this,m.extend([func,undefined],arguments,1));
},listMinMax:function(_115,lst){
if(lst.length===0){
return null;
}
var cur=lst[0];
var _118=MochiKit.Base.compare;
for(var i=1;i<lst.length;i++){
var o=lst[i];
if(_118(o,cur)==_115){
cur=o;
}
}
return cur;
},objMax:function(){
return MochiKit.Base.listMinMax(1,arguments);
},objMin:function(){
return MochiKit.Base.listMinMax(-1,arguments);
},findIdentical:function(lst,_11c,_11d,end){
if(typeof (end)=="undefined"||end===null){
end=lst.length;
}
if(typeof (_11d)=="undefined"||_11d===null){
_11d=0;
}
for(var i=_11d;i<end;i++){
if(lst[i]===_11c){
return i;
}
}
return -1;
},mean:function(){
var sum=0;
var m=MochiKit.Base;
var args=m.extend(null,arguments);
var _123=args.length;
while(args.length){
var o=args.shift();
if(o&&typeof (o)=="object"&&typeof (o.length)=="number"){
_123+=o.length-1;
for(var i=o.length-1;i>=0;i--){
sum+=o[i];
}
}else{
sum+=o;
}
}
if(_123<=0){
throw new TypeError("mean() requires at least one argument");
}
return sum/_123;
},median:function(){
var data=MochiKit.Base.flattenArguments(arguments);
if(data.length===0){
throw new TypeError("median() requires at least one argument");
}
data.sort(MochiKit.Base.compare);
if(data.length%2==0){
var _127=data.length/2;
return (data[_127]+data[_127-1])/2;
}else{
return data[(data.length-1)/2];
}
},findValue:function(lst,_129,_12a,end){
if(typeof (end)=="undefined"||end===null){
end=lst.length;
}
if(typeof (_12a)=="undefined"||_12a===null){
_12a=0;
}
var cmp=MochiKit.Base.compare;
for(var i=_12a;i<end;i++){
if(cmp(lst[i],_129)===0){
return i;
}
}
return -1;
},nodeWalk:function(node,_12f){
var _130=[node];
var _131=MochiKit.Base.extend;
while(_130.length){
var res=_12f(_130.shift());
if(res){
_131(_130,res);
}
}
},nameFunctions:function(_133){
var base=_133.NAME;
if(typeof (base)=="undefined"){
base="";
}else{
base=base+".";
}
for(var name in _133){
var o=_133[name];
if(typeof (o)=="function"&&typeof (o.NAME)=="undefined"){
try{
o.NAME=base+name;
}
catch(e){
}
}
}
},queryString:function(_137,_138){
if(typeof (MochiKit.DOM)!="undefined"&&arguments.length==1&&(typeof (_137)=="string"||(typeof (_137.nodeType)!="undefined"&&_137.nodeType>0))){
var kv=MochiKit.DOM.formContents(_137);
_137=kv[0];
_138=kv[1];
}else{
if(arguments.length==1){
if(typeof (_137.length)=="number"&&_137.length==2){
return arguments.callee(_137[0],_137[1]);
}
var o=_137;
_137=[];
_138=[];
for(var k in o){
var v=o[k];
if(typeof (v)=="function"){
continue;
}else{
if(MochiKit.Base.isArrayLike(v)){
for(var i=0;i<v.length;i++){
_137.push(k);
_138.push(v[i]);
}
}else{
_137.push(k);
_138.push(v);
}
}
}
}
}
var rval=[];
var len=Math.min(_137.length,_138.length);
var _140=MochiKit.Base.urlEncode;
for(var i=0;i<len;i++){
v=_138[i];
if(typeof (v)!="undefined"&&v!==null){
rval.push(_140(_137[i])+"="+_140(v));
}
}
return rval.join("&");
},parseQueryString:function(_141,_142){
var qstr=(_141.charAt(0)=="?")?_141.substring(1):_141;
var _144=qstr.replace(/\+/g,"%20").split(/\&amp\;|\&\#38\;|\&#x26;|\&/);
var o={};
var _146;
if(typeof (decodeURIComponent)!="undefined"){
_146=decodeURIComponent;
}else{
_146=unescape;
}
if(_142){
for(var i=0;i<_144.length;i++){
var pair=_144[i].split("=");
var name=_146(pair.shift());
if(!name){
continue;
}
var arr=o[name];
if(!(arr instanceof Array)){
arr=[];
o[name]=arr;
}
arr.push(_146(pair.join("=")));
}
}else{
for(var i=0;i<_144.length;i++){
pair=_144[i].split("=");
var name=pair.shift();
if(!name){
continue;
}
o[_146(name)]=_146(pair.join("="));
}
}
return o;
}});
MochiKit.Base.AdapterRegistry=function(){
this.pairs=[];
};
MochiKit.Base.AdapterRegistry.prototype={register:function(name,_14c,wrap,_14e){
if(_14e){
this.pairs.unshift([name,_14c,wrap]);
}else{
this.pairs.push([name,_14c,wrap]);
}
},match:function(){
for(var i=0;i<this.pairs.length;i++){
var pair=this.pairs[i];
if(pair[1].apply(this,arguments)){
return pair[2].apply(this,arguments);
}
}
throw MochiKit.Base.NotFound;
},unregister:function(name){
for(var i=0;i<this.pairs.length;i++){
var pair=this.pairs[i];
if(pair[0]==name){
this.pairs.splice(i,1);
return true;
}
}
return false;
}};
MochiKit.Base.moduleExport=function(_154,_155){
var SKIP={toString:true,NAME:true,VERSION:true};
var mods=MochiKit.Base.extend([],arguments,1);
while((_155=mods.shift())!=null){
for(var k in _155){
var v=_155[k];
if(v!=null){
var _15a=(typeof (v.__export__)=="boolean");
var _15b=(k[0]!=="_"&&!SKIP[k]);
if(_15a?v.__export__:_15b){
if(typeof (v)=="object"&&v.NAME&&v.VERSION){
mods.push(v);
}else{
_154[k]=_155[k];
}
}
}
}
}
return _154;
};
MochiKit.Base._exportSymbols=function(_15c,_15d){
if(MochiKit.__export__!==false&&_15d.__export__!==false){
MochiKit.Base.moduleExport(_15c,_15d);
}
};
MochiKit.Base._deprecated=function(_15e,name,_160,_161,_162){
if(typeof (_15e)==="string"){
if(_15e.indexOf("MochiKit.")===0){
_15e=_15e.substring(9);
}
_15e=MochiKit[_15e];
}
var _163=_160.split(".")[1];
var _164=_160.split(".")[2];
var func=function(){
var self=arguments.callee;
var msg=_15e.NAME+"."+name+" is deprecated since version "+_161+". Use "+_160+" instead.";
if(self.logged!==true){
self.logged=true;
if(MochiKit.Logging){
MochiKit.Logging.logDebug(msg);
}else{
if(console&&console.log){
console.log(msg);
}
}
}
if(!MochiKit[_163]){
throw new Error(msg);
}
return MochiKit[_163][_164].apply(this,arguments);
};
func.__export__=(_162===true);
_15e[name]=func;
};
MochiKit.Base.__new__=function(){
var m=this;
m.noop=m.operator.identity;
m._deprecated(m,"forward","MochiKit.Base.forwardCall","1.3");
m._deprecated(m,"find","MochiKit.Base.findValue","1.3");
if(typeof (encodeURIComponent)!="undefined"){
m.urlEncode=function(_169){
return encodeURIComponent(_169).replace(/\'/g,"%27");
};
}else{
m.urlEncode=function(_16a){
return escape(_16a).replace(/\+/g,"%2B").replace(/\"/g,"%22").replace(/\'/g,"%27");
};
}
m.NamedError=function(name){
this.message=name;
this.name=name;
};
m.NamedError.prototype=new Error();
m.NamedError.prototype.constructor=m.NamedError;
m.update(m.NamedError.prototype,{repr:function(){
if(this.message&&this.message!=this.name){
return this.name+"("+m.repr(this.message)+")";
}else{
return this.name+"()";
}
},toString:m.forwardCall("repr")});
m.NotFound=new m.NamedError("MochiKit.Base.NotFound");
m.listMax=m.partial(m.listMinMax,1);
m.listMin=m.partial(m.listMinMax,-1);
m.isCallable=m.typeMatcher("function");
m.isUndefined=m.typeMatcher("undefined");
m.isValue=m.typeMatcher("boolean","number","string");
m.merge=m.partial(m.update,null);
m.zip=m.partial(m.map,null);
m.average=m.mean;
m.comparatorRegistry=new m.AdapterRegistry();
m.registerComparator("dateLike",m.isDateLike,m.compareDateLike);
m.registerComparator("arrayLike",m.isArrayLike,m.compareArrayLike);
m.reprRegistry=new m.AdapterRegistry();
m.registerRepr("arrayLike",m.isArrayLike,m.reprArrayLike);
m.registerRepr("string",m.typeMatcher("string"),m.reprString);
m.registerRepr("numbers",m.typeMatcher("number","boolean"),m.reprNumber);
m.jsonRegistry=new m.AdapterRegistry();
m.nameFunctions(this);
};
MochiKit.Base.__new__();
if(MochiKit.__export__){
compare=MochiKit.Base.compare;
compose=MochiKit.Base.compose;
serializeJSON=MochiKit.Base.serializeJSON;
mean=MochiKit.Base.mean;
median=MochiKit.Base.median;
}
MochiKit.Base._exportSymbols(this,MochiKit.Base);
MochiKit.Base.module(MochiKit,"Async","1.5",["Base"]);
MochiKit.Async.Deferred=function(_2f5){
this.chain=[];
this.id=this._nextId();
this.fired=-1;
this.paused=0;
this.results=[null,null];
this.canceller=_2f5;
this.silentlyCancelled=false;
this.chained=false;
this.finalized=false;
};
MochiKit.Async.Deferred.prototype={repr:function(){
return "Deferred("+this.id+", "+this.state()+")";
},toString:MochiKit.Base.forwardCall("repr"),_nextId:MochiKit.Base.counter(),state:function(){
if(this.fired==-1){
return "unfired";
}else{
if(this.fired===0){
return "success";
}else{
return "error";
}
}
},cancel:function(e){
var self=MochiKit.Async;
if(this.fired==-1){
if(this.canceller){
this.canceller(this);
}else{
this.silentlyCancelled=true;
}
if(this.fired==-1){
if(typeof (e)==="string"){
e=new self.GenericError(e);
}else{
if(!(e instanceof Error)){
e=new self.CancelledError(this);
}
}
this.errback(e);
}
}else{
if((this.fired===0)&&(this.results[0] instanceof self.Deferred)){
this.results[0].cancel(e);
}
}
},_resback:function(res){
this.fired=((res instanceof Error)?1:0);
this.results[this.fired]=res;
if(this.paused===0){
this._fire();
}
},_check:function(){
if(this.fired!=-1){
if(!this.silentlyCancelled){
throw new MochiKit.Async.AlreadyCalledError(this);
}
this.silentlyCancelled=false;
return;
}
},callback:function(res){
this._check();
if(res instanceof MochiKit.Async.Deferred){
throw new Error("Deferred instances can only be chained if they are the result of a callback");
}
this._resback(res);
},errback:function(res){
this._check();
var self=MochiKit.Async;
if(res instanceof self.Deferred){
throw new Error("Deferred instances can only be chained if they are the result of a callback");
}
if(!(res instanceof Error)){
res=new self.GenericError(res);
}
this._resback(res);
},addBoth:function(fn){
if(arguments.length>1){
fn=MochiKit.Base.partial.apply(null,arguments);
}
return this.addCallbacks(fn,fn);
},addCallback:function(fn){
if(arguments.length>1){
fn=MochiKit.Base.partial.apply(null,arguments);
}
return this.addCallbacks(fn,null);
},addErrback:function(fn){
if(arguments.length>1){
fn=MochiKit.Base.partial.apply(null,arguments);
}
return this.addCallbacks(null,fn);
},addCallbacks:function(cb,eb){
if(this.chained){
throw new Error("Chained Deferreds can not be re-used");
}
if(this.finalized){
throw new Error("Finalized Deferreds can not be re-used");
}
this.chain.push([cb,eb]);
if(this.fired>=0){
this._fire();
}
return this;
},setFinalizer:function(fn){
if(this.chained){
throw new Error("Chained Deferreds can not be re-used");
}
if(this.finalized){
throw new Error("Finalized Deferreds can not be re-used");
}
if(arguments.length>1){
fn=MochiKit.Base.partial.apply(null,arguments);
}
this._finalizer=fn;
if(this.fired>=0){
this._fire();
}
return this;
},_fire:function(){
var _302=this.chain;
var _303=this.fired;
var res=this.results[_303];
var self=this;
var cb=null;
while(_302.length>0&&this.paused===0){
var pair=_302.shift();
var f=pair[_303];
if(f===null){
continue;
}
try{
res=f(res);
_303=((res instanceof Error)?1:0);
if(res instanceof MochiKit.Async.Deferred){
cb=function(res){
self.paused--;
self._resback(res);
};
this.paused++;
}
}
catch(err){
_303=1;
if(!(err instanceof Error)){
err=new MochiKit.Async.GenericError(err);
}
res=err;
}
}
this.fired=_303;
this.results[_303]=res;
if(this.chain.length==0&&this.paused===0&&this._finalizer){
this.finalized=true;
this._finalizer(res);
}
if(cb&&this.paused){
res.addBoth(cb);
res.chained=true;
}
}};
MochiKit.Base.update(MochiKit.Async,{evalJSONRequest:function(req){
return MochiKit.Base.evalJSON(req.responseText);
},succeed:function(_30b){
var d=new MochiKit.Async.Deferred();
d.callback.apply(d,arguments);
return d;
},fail:function(_30d){
var d=new MochiKit.Async.Deferred();
d.errback.apply(d,arguments);
return d;
},getXMLHttpRequest:function(){
var self=arguments.callee;
if(!self.XMLHttpRequest){
var _310=[function(){
return new XMLHttpRequest();
},function(){
return new ActiveXObject("Msxml2.XMLHTTP");
},function(){
return new ActiveXObject("Microsoft.XMLHTTP");
},function(){
return new ActiveXObject("Msxml2.XMLHTTP.4.0");
},function(){
throw new MochiKit.Async.BrowserComplianceError("Browser does not support XMLHttpRequest");
}];
for(var i=0;i<_310.length;i++){
var func=_310[i];
try{
self.XMLHttpRequest=func;
return func();
}
catch(e){
}
}
}
return self.XMLHttpRequest();
},_xhr_onreadystatechange:function(d){
var m=MochiKit.Base;
if(this.readyState==4){
try{
this.onreadystatechange=null;
}
catch(e){
try{
this.onreadystatechange=m.noop;
}
catch(e){
}
}
var _315=null;
try{
_315=this.status;
if(!_315&&(this.response||m.isNotEmpty(this.responseText))){
_315=304;
}
}
catch(e){
}
if(_315==200||_315==201||_315==204||_315==304||_315==1223){
d.callback(this);
}else{
var err=new MochiKit.Async.XMLHttpRequestError(this,"Request failed");
if(err.number){
d.errback(err);
}else{
d.errback(err);
}
}
}
},_xhr_canceller:function(req){
try{
req.onreadystatechange=null;
}
catch(e){
try{
req.onreadystatechange=MochiKit.Base.noop;
}
catch(e){
}
}
req.abort();
},sendXMLHttpRequest:function(req,_319){
if(typeof (_319)=="undefined"||_319===null){
_319="";
}
var m=MochiKit.Base;
var self=MochiKit.Async;
var d=new self.Deferred(m.partial(self._xhr_canceller,req));
try{
req.onreadystatechange=m.bind(self._xhr_onreadystatechange,req,d);
req.send(_319);
}
catch(e){
try{
req.onreadystatechange=null;
}
catch(ignore){
}
d.errback(e);
}
return d;
},doXHR:function(url,opts){
var self=MochiKit.Async;
return self.callLater(0,self._doXHR,url,opts);
},_doXHR:function(url,opts){
var m=MochiKit.Base;
opts=m.update({method:"GET",sendContent:""},opts);
var self=MochiKit.Async;
var req=self.getXMLHttpRequest();
if(opts.queryString){
var qs=m.queryString(opts.queryString);
if(qs){
url+="?"+qs;
}
}
if("username" in opts){
req.open(opts.method,url,true,opts.username,opts.password);
}else{
req.open(opts.method,url,true);
}
if(req.overrideMimeType&&opts.mimeType){
req.overrideMimeType(opts.mimeType);
}
req.setRequestHeader("X-Requested-With","XMLHttpRequest");
if(opts.headers){
var _326=opts.headers;
if(!m.isArrayLike(_326)){
_326=m.items(_326);
}
for(var i=0;i<_326.length;i++){
var _328=_326[i];
var name=_328[0];
var _32a=_328[1];
req.setRequestHeader(name,_32a);
}
}
if("responseType" in opts&&"responseType" in req){
req.responseType=opts.responseType;
}
if(opts.withCredentials){
req.withCredentials="true";
}
return self.sendXMLHttpRequest(req,opts.sendContent);
},_buildURL:function(url){
if(arguments.length>1){
var m=MochiKit.Base;
var qs=m.queryString.apply(null,m.extend(null,arguments,1));
if(qs){
return url+"?"+qs;
}
}
return url;
},doSimpleXMLHttpRequest:function(url){
var self=MochiKit.Async;
url=self._buildURL.apply(self,arguments);
return self.doXHR(url);
},loadJSONDoc:function(url){
var self=MochiKit.Async;
url=self._buildURL.apply(self,arguments);
var d=self.doXHR(url,{"mimeType":"text/plain","headers":[["Accept","application/json"]]});
d=d.addCallback(self.evalJSONRequest);
return d;
},loadScript:function(url){
var d=new MochiKit.Async.Deferred();
var _335=document.createElement("script");
_335.type="text/javascript";
_335.src=url;
_335.onload=function(){
_335.onload=null;
_335.onerror=null;
_335.onreadystatechange=null;
_335=null;
d.callback();
};
_335.onerror=function(msg){
_335.onload=null;
_335.onerror=null;
_335.onreadystatechange=null;
_335=null;
msg="Failed to load script at "+url+": "+msg;
d.errback(new URIError(msg,url));
};
_335.onreadystatechange=function(){
if(_335.readyState=="loaded"||_335.readyState=="complete"){
_335.onload();
}else{
MochiKit.Async.callLater(10,_335.onerror,"Script loading timed out");
}
};
document.getElementsByTagName("head")[0].appendChild(_335);
return d;
},wait:function(_337,_338){
var d=new MochiKit.Async.Deferred();
var cb=MochiKit.Base.bind("callback",d,_338);
var _33b=setTimeout(cb,Math.floor(_337*1000));
d.canceller=function(){
try{
clearTimeout(_33b);
}
catch(e){
}
};
return d;
},callLater:function(_33c,func){
var m=MochiKit.Base;
var _33f=m.partial.apply(m,m.extend(null,arguments,1));
return MochiKit.Async.wait(_33c).addCallback(function(res){
return _33f();
});
}});
MochiKit.Async.DeferredLock=function(){
this.waiting=[];
this.locked=false;
this.id=this._nextId();
};
MochiKit.Async.DeferredLock.prototype={__class__:MochiKit.Async.DeferredLock,acquire:function(){
var d=new MochiKit.Async.Deferred();
if(this.locked){
this.waiting.push(d);
}else{
this.locked=true;
d.callback(this);
}
return d;
},release:function(){
if(!this.locked){
throw TypeError("Tried to release an unlocked DeferredLock");
}
this.locked=false;
if(this.waiting.length>0){
this.locked=true;
this.waiting.shift().callback(this);
}
},_nextId:MochiKit.Base.counter(),repr:function(){
var _342;
if(this.locked){
_342="locked, "+this.waiting.length+" waiting";
}else{
_342="unlocked";
}
return "DeferredLock("+this.id+", "+_342+")";
},toString:MochiKit.Base.forwardCall("repr")};
MochiKit.Async.DeferredList=function(list,_344,_345,_346,_347){
MochiKit.Async.Deferred.apply(this,[_347]);
this.list=list;
var _348=[];
this.resultList=_348;
this.finishedCount=0;
this.fireOnOneCallback=_344;
this.fireOnOneErrback=_345;
this.consumeErrors=_346;
var cb=MochiKit.Base.bind(this._cbDeferred,this);
for(var i=0;i<list.length;i++){
var d=list[i];
_348.push(undefined);
d.addCallback(cb,i,true);
d.addErrback(cb,i,false);
}
if(list.length===0&&!_344){
this.callback(this.resultList);
}
};
MochiKit.Async.DeferredList.prototype=new MochiKit.Async.Deferred();
MochiKit.Async.DeferredList.prototype.constructor=MochiKit.Async.DeferredList;
MochiKit.Async.DeferredList.prototype._cbDeferred=function(_34c,_34d,_34e){
this.resultList[_34c]=[_34d,_34e];
this.finishedCount+=1;
if(this.fired==-1){
if(_34d&&this.fireOnOneCallback){
this.callback([_34c,_34e]);
}else{
if(!_34d&&this.fireOnOneErrback){
this.errback(_34e);
}else{
if(this.finishedCount==this.list.length){
this.callback(this.resultList);
}
}
}
}
if(!_34d&&this.consumeErrors){
_34e=null;
}
return _34e;
};
MochiKit.Async.gatherResults=function(_34f){
var d=new MochiKit.Async.DeferredList(_34f,false,true,false);
d.addCallback(function(_351){
var ret=[];
for(var i=0;i<_351.length;i++){
ret.push(_351[i][1]);
}
return ret;
});
return d;
};
MochiKit.Async.maybeDeferred=function(func){
var self=MochiKit.Async;
var _356;
try{
var r=func.apply(null,MochiKit.Base.extend([],arguments,1));
if(r instanceof self.Deferred){
_356=r;
}else{
if(r instanceof Error){
_356=self.fail(r);
}else{
_356=self.succeed(r);
}
}
}
catch(e){
_356=self.fail(e);
}
return _356;
};
MochiKit.Async.__new__=function(){
var m=MochiKit.Base;
var ne=m.partial(m._newNamedError,this);
ne("AlreadyCalledError",function(_35a){
this.deferred=_35a;
});
ne("CancelledError",function(_35b){
this.deferred=_35b;
});
ne("BrowserComplianceError",function(msg){
this.message=msg;
});
ne("GenericError",function(msg){
this.message=msg;
});
ne("XMLHttpRequestError",function(req,msg){
this.req=req;
this.message=msg;
try{
this.number=req.status;
}
catch(e){
}
});
m.nameFunctions(this);
};
MochiKit.Async.__new__();
MochiKit.Base._exportSymbols(this,MochiKit.Async);
MochiKit.Base.module(MochiKit,"DOM","1.5",["Base"]);
MochiKit.Base.update(MochiKit.DOM,{currentWindow:function(){
return MochiKit.DOM._window;
},currentDocument:function(){
return MochiKit.DOM._document;
},withWindow:function(win,func){
var self=MochiKit.DOM;
var _363=self._document;
var _364=self._window;
var rval;
try{
self._window=win;
self._document=win.document;
rval=func();
}
catch(e){
self._window=_364;
self._document=_363;
throw e;
}
self._window=_364;
self._document=_363;
return rval;
},formContents:function(elem){
var _367=[];
var _368=[];
var m=MochiKit.Base;
var self=MochiKit.DOM;
if(typeof (elem)=="undefined"||elem===null){
elem=self._document.body;
}else{
elem=self.getElement(elem);
}
m.nodeWalk(elem,function(elem){
var name=elem.name;
if(m.isNotEmpty(name)){
var _36d=elem.tagName.toUpperCase();
if(_36d==="INPUT"&&(elem.type=="radio"||elem.type=="checkbox")&&!elem.checked){
return null;
}
if(_36d==="SELECT"){
if(elem.type=="select-one"){
if(elem.selectedIndex>=0){
var opt=elem.options[elem.selectedIndex];
var v=opt.value;
if(!v){
var h=opt.outerHTML;
if(h&&!h.match(/^[^>]+\svalue\s*=/i)){
v=opt.text;
}
}
_367.push(name);
_368.push(v);
return null;
}
_367.push(name);
_368.push("");
return null;
}else{
var opts=elem.options;
if(!opts.length){
_367.push(name);
_368.push("");
return null;
}
for(var i=0;i<opts.length;i++){
var opt=opts[i];
if(!opt.selected){
continue;
}
var v=opt.value;
if(!v){
var h=opt.outerHTML;
if(h&&!h.match(/^[^>]+\svalue\s*=/i)){
v=opt.text;
}
}
_367.push(name);
_368.push(v);
}
return null;
}
}
if(_36d==="FORM"||_36d==="P"||_36d==="SPAN"||_36d==="DIV"){
return elem.childNodes;
}
_367.push(name);
_368.push(elem.value||"");
return null;
}
return elem.childNodes;
});
return [_367,_368];
},withDocument:function(doc,func){
var self=MochiKit.DOM;
var _376=self._document;
var rval;
try{
self._document=doc;
rval=func();
}
catch(e){
self._document=_376;
throw e;
}
self._document=_376;
return rval;
},registerDOMConverter:function(name,_379,wrap,_37b){
MochiKit.DOM.domConverters.register(name,_379,wrap,_37b);
},coerceToDOM:function(node,ctx){
var m=MochiKit.Base;
var im=MochiKit.Iter;
var self=MochiKit.DOM;
if(im){
var iter=im.iter;
var _382=im.repeat;
}
var map=m.map;
var _384=self.domConverters;
var _385=arguments.callee;
var _386=m.NotFound;
while(true){
if(typeof (node)=="undefined"||node===null){
return null;
}
if(typeof (node)=="function"&&typeof (node.length)=="number"&&!(node instanceof Function)){
node=im?im.list(node):m.extend(null,node);
}
if(typeof (node.nodeType)!="undefined"&&node.nodeType>0){
return node;
}
if(typeof (node)=="number"||typeof (node)=="boolean"){
node=node.toString();
}
if(typeof (node)=="string"){
return self._document.createTextNode(node);
}
if(typeof (node.__dom__)=="function"){
node=node.__dom__(ctx);
continue;
}
if(typeof (node.dom)=="function"){
node=node.dom(ctx);
continue;
}
if(typeof (node)=="function"){
node=node.apply(ctx,[ctx]);
continue;
}
if(im){
var _387=null;
try{
_387=iter(node);
}
catch(e){
}
if(_387){
return map(_385,_387,_382(ctx));
}
}else{
if(m.isArrayLike(node)){
var func=function(n){
return _385(n,ctx);
};
return map(func,node);
}
}
try{
node=_384.match(node,ctx);
continue;
}
catch(e){
if(e!=_386){
throw e;
}
}
return self._document.createTextNode(node.toString());
}
return undefined;
},isChildNode:function(node,_38b){
var self=MochiKit.DOM;
if(typeof (node)=="string"){
node=self.getElement(node);
}
if(typeof (_38b)=="string"){
_38b=self.getElement(_38b);
}
if(typeof (node)=="undefined"||node===null){
return false;
}
while(node!=null&&node!==self._document){
if(node===_38b){
return true;
}
node=node.parentNode;
}
return false;
},setNodeAttribute:function(node,attr,_38f){
var o={};
o[attr]=_38f;
try{
return MochiKit.DOM.updateNodeAttributes(node,o);
}
catch(e){
}
return null;
},getNodeAttribute:function(node,attr){
var self=MochiKit.DOM;
var _394=self.attributeArray.renames[attr];
var _395=self.attributeArray.ignoreAttr[attr];
node=self.getElement(node);
try{
if(_394){
return node[_394];
}
var _396=node.getAttribute(attr);
if(_396!=_395){
return _396;
}
}
catch(e){
}
return null;
},removeNodeAttribute:function(node,attr){
var self=MochiKit.DOM;
var _39a=self.attributeArray.renames[attr];
node=self.getElement(node);
try{
if(_39a){
return node[_39a];
}
return node.removeAttribute(attr);
}
catch(e){
}
return null;
},updateNodeAttributes:function(node,_39c){
var elem=node;
var self=MochiKit.DOM;
var base=MochiKit.Base;
if(typeof (node)=="string"){
elem=self.getElement(node);
}
if(_39c){
if(self.attributeArray.compliant){
for(var k in _39c){
var v=_39c[k];
if(typeof (v)=="object"&&typeof (elem[k])=="object"){
if(k=="style"&&MochiKit.Style){
MochiKit.Style.setStyle(elem,v);
}else{
base.updatetree(elem[k],v);
}
}else{
if(k.substring(0,2)=="on"){
if(typeof (v)=="string"){
v=new Function(v);
}
elem[k]=v;
}else{
elem.setAttribute(k,v);
}
}
if(base.isValue(elem[k])&&elem[k]!=v){
elem[k]=v;
}
}
}else{
var _3a2=self.attributeArray.renames;
for(var k in _39c){
v=_39c[k];
var _3a3=_3a2[k];
if(k=="style"&&typeof (v)=="string"){
elem.style.cssText=v;
}else{
if(typeof (_3a3)=="string"){
elem[_3a3]=v;
}else{
if(typeof (elem[k])=="object"&&typeof (v)=="object"){
if(k=="style"&&MochiKit.Style){
MochiKit.Style.setStyle(elem,v);
}else{
base.updatetree(elem[k],v);
}
}else{
if(k.substring(0,2)=="on"){
if(typeof (v)=="string"){
v=new Function(v);
}
elem[k]=v;
}else{
elem.setAttribute(k,v);
}
}
}
}
if(base.isValue(elem[k])&&elem[k]!=v){
elem[k]=v;
}
}
}
}
return elem;
},appendChildNodes:function(node){
var elem=node;
var self=MochiKit.DOM;
if(typeof (node)=="string"){
elem=self.getElement(node);
}
var _3a7=[self.coerceToDOM(MochiKit.Base.extend(null,arguments,1),elem)];
var _3a8=MochiKit.Base.concat;
while(_3a7.length){
var n=_3a7.shift();
if(typeof (n)=="undefined"||n===null){
}else{
if(typeof (n.nodeType)=="number"){
elem.appendChild(n);
}else{
_3a7=_3a8(n,_3a7);
}
}
}
return elem;
},insertSiblingNodesBefore:function(node){
var elem=node;
var self=MochiKit.DOM;
if(typeof (node)=="string"){
elem=self.getElement(node);
}
var _3ad=[self.coerceToDOM(MochiKit.Base.extend(null,arguments,1),elem)];
var _3ae=elem.parentNode;
var _3af=MochiKit.Base.concat;
while(_3ad.length){
var n=_3ad.shift();
if(typeof (n)=="undefined"||n===null){
}else{
if(typeof (n.nodeType)=="number"){
_3ae.insertBefore(n,elem);
}else{
_3ad=_3af(n,_3ad);
}
}
}
return _3ae;
},insertSiblingNodesAfter:function(node){
var elem=node;
var self=MochiKit.DOM;
if(typeof (node)=="string"){
elem=self.getElement(node);
}
var _3b4=[self.coerceToDOM(MochiKit.Base.extend(null,arguments,1),elem)];
if(elem.nextSibling){
return self.insertSiblingNodesBefore(elem.nextSibling,_3b4);
}else{
return self.appendChildNodes(elem.parentNode,_3b4);
}
},replaceChildNodes:function(node){
var elem=node;
var self=MochiKit.DOM;
if(typeof (node)=="string"){
elem=self.getElement(node);
arguments[0]=elem;
}
var _3b8;
while((_3b8=elem.firstChild)){
elem.removeChild(_3b8);
}
if(arguments.length<2){
return elem;
}else{
return self.appendChildNodes.apply(this,arguments);
}
},createDOM:function(name,_3ba){
var elem;
var self=MochiKit.DOM;
var m=MochiKit.Base;
if(typeof (_3ba)=="string"||typeof (_3ba)=="number"){
var args=m.extend([name,null],arguments,1);
return arguments.callee.apply(this,args);
}
if(typeof (name)=="string"){
var _3bf=self._xhtml;
if(_3ba&&!self.attributeArray.compliant){
var _3c0="";
if("name" in _3ba){
_3c0+=" name=\""+self.escapeHTML(_3ba.name)+"\"";
}
if(name=="input"&&"type" in _3ba){
_3c0+=" type=\""+self.escapeHTML(_3ba.type)+"\"";
}
if(_3c0){
name="<"+name+_3c0+">";
_3bf=false;
}
}
var d=self._document;
if(_3bf&&d===document){
elem=d.createElementNS("http://www.w3.org/1999/xhtml",name);
}else{
elem=d.createElement(name);
}
}else{
elem=name;
}
if(_3ba){
self.updateNodeAttributes(elem,_3ba);
}
if(arguments.length<=2){
return elem;
}else{
var args=m.extend([elem],arguments,2);
return self.appendChildNodes.apply(this,args);
}
},createDOMFunc:function(){
var m=MochiKit.Base;
return m.partial.apply(this,m.extend([MochiKit.DOM.createDOM],arguments));
},removeElement:function(elem){
var self=MochiKit.DOM;
if(typeof (elem)=="string"){
elem=self.getElement(elem);
}
var e=self.coerceToDOM(elem);
e.parentNode.removeChild(e);
return e;
},swapDOM:function(dest,src){
var self=MochiKit.DOM;
dest=self.getElement(dest);
var _3c9=dest.parentNode;
if(src){
if(typeof (src)=="string"){
src=self.getElement(src);
}
src=self.coerceToDOM(src,_3c9);
_3c9.replaceChild(src,dest);
}else{
_3c9.removeChild(dest);
}
return src;
},getElement:function(id){
var self=MochiKit.DOM;
if(arguments.length==1){
return ((typeof (id)=="string")?self._document.getElementById(id):id);
}else{
return MochiKit.Base.map(self.getElement,arguments);
}
},getElementsByTagAndClassName:function(_3cc,_3cd,_3ce){
var self=MochiKit.DOM;
if(typeof (_3cc)=="undefined"||_3cc===null){
_3cc="*";
}
if(typeof (_3ce)=="undefined"||_3ce===null){
_3ce=self._document;
}
_3ce=self.getElement(_3ce);
if(_3ce==null){
return [];
}
var _3d0=(_3ce.getElementsByTagName(_3cc)||self._document.all);
if(typeof (_3cd)=="undefined"||_3cd===null){
return MochiKit.Base.extend(null,_3d0);
}
var _3d1=[];
for(var i=0;i<_3d0.length;i++){
var _3d3=_3d0[i];
var cls=_3d3.className;
if(typeof (cls)!="string"){
cls=_3d3.getAttribute("class");
}
if(typeof (cls)=="string"){
var _3d5=cls.split(" ");
for(var j=0;j<_3d5.length;j++){
if(_3d5[j]==_3cd){
_3d1.push(_3d3);
break;
}
}
}
}
return _3d1;
},_newCallStack:function(path,once){
var rval=function(){
var _3da=arguments.callee.callStack;
for(var i=0;i<_3da.length;i++){
if(_3da[i].apply(this,arguments)===false){
break;
}
}
if(once){
try{
this[path]=null;
}
catch(e){
}
}
};
rval.callStack=[];
return rval;
},addToCallStack:function(_3dc,path,func,once){
var self=MochiKit.DOM;
var _3e1=_3dc[path];
var _3e2=_3e1;
if(!(typeof (_3e1)=="function"&&typeof (_3e1.callStack)=="object"&&_3e1.callStack!==null)){
_3e2=self._newCallStack(path,once);
if(typeof (_3e1)=="function"){
_3e2.callStack.push(_3e1);
}
_3dc[path]=_3e2;
}
_3e2.callStack.push(func);
},addLoadEvent:function(func){
var self=MochiKit.DOM;
self.addToCallStack(self._window,"onload",func,true);
},focusOnLoad:function(_3e5){
var self=MochiKit.DOM;
self.addLoadEvent(function(){
_3e5=self.getElement(_3e5);
if(_3e5){
_3e5.focus();
}
});
},setElementClass:function(_3e7,_3e8){
var self=MochiKit.DOM;
var obj=self.getElement(_3e7);
if(self.attributeArray.compliant){
obj.setAttribute("class",_3e8);
}else{
obj.setAttribute("className",_3e8);
}
},toggleElementClass:function(_3eb){
var self=MochiKit.DOM;
for(var i=1;i<arguments.length;i++){
var obj=self.getElement(arguments[i]);
if(!self.addElementClass(obj,_3eb)){
self.removeElementClass(obj,_3eb);
}
}
},addElementClass:function(_3ef,_3f0){
var self=MochiKit.DOM;
var obj=self.getElement(_3ef);
var cls=obj.className;
if(typeof (cls)!="string"){
cls=obj.getAttribute("class");
}
if(typeof (cls)!="string"||cls.length===0){
self.setElementClass(obj,_3f0);
return true;
}
if(cls==_3f0){
return false;
}
var _3f4=cls.split(" ");
for(var i=0;i<_3f4.length;i++){
if(_3f4[i]==_3f0){
return false;
}
}
self.setElementClass(obj,cls+" "+_3f0);
return true;
},removeElementClass:function(_3f6,_3f7){
var self=MochiKit.DOM;
var obj=self.getElement(_3f6);
var cls=obj.className;
if(typeof (cls)!="string"){
cls=obj.getAttribute("class");
}
if(typeof (cls)!="string"||cls.length===0){
return false;
}
if(cls==_3f7){
self.setElementClass(obj,"");
return true;
}
var _3fb=cls.split(" ");
for(var i=0;i<_3fb.length;i++){
if(_3fb[i]==_3f7){
_3fb.splice(i,1);
self.setElementClass(obj,_3fb.join(" "));
return true;
}
}
return false;
},swapElementClass:function(_3fd,_3fe,_3ff){
var obj=MochiKit.DOM.getElement(_3fd);
var res=MochiKit.DOM.removeElementClass(obj,_3fe);
if(res){
MochiKit.DOM.addElementClass(obj,_3ff);
}
return res;
},hasElementClass:function(_402,_403){
var obj=MochiKit.DOM.getElement(_402);
if(obj==null){
return false;
}
var cls=obj.className;
if(typeof (cls)!="string"&&typeof (obj.getAttribute)=="function"){
cls=obj.getAttribute("class");
}
if(typeof (cls)!="string"){
return false;
}
var _406=cls.split(" ");
for(var i=1;i<arguments.length;i++){
var good=false;
for(var j=0;j<_406.length;j++){
if(_406[j]==arguments[i]){
good=true;
break;
}
}
if(!good){
return false;
}
}
return true;
},escapeHTML:function(s){
return s.replace(/&/g,"&amp;").replace(/"/g,"&quot;").replace(/</g,"&lt;").replace(/>/g,"&gt;");
},toHTML:function(dom){
return MochiKit.DOM.emitHTML(dom).join("");
},emitHTML:function(dom,lst){
if(typeof (lst)=="undefined"||lst===null){
lst=[];
}
var _40e=[dom];
var self=MochiKit.DOM;
var _410=self.escapeHTML;
var _411=self.attributeArray;
while(_40e.length){
dom=_40e.pop();
if(typeof (dom)=="string"){
lst.push(dom);
}else{
if(dom.nodeType==1){
lst.push("<"+dom.tagName.toLowerCase());
var _412=[];
var _413=_411(dom);
for(var i=0;i<_413.length;i++){
var a=_413[i];
_412.push([" ",a.name,"=\"",_410(a.value),"\""]);
}
_412.sort();
for(i=0;i<_412.length;i++){
var _416=_412[i];
for(var j=0;j<_416.length;j++){
lst.push(_416[j]);
}
}
if(dom.hasChildNodes()){
lst.push(">");
_40e.push("</"+dom.tagName.toLowerCase()+">");
var _418=dom.childNodes;
for(i=_418.length-1;i>=0;i--){
_40e.push(_418[i]);
}
}else{
lst.push("/>");
}
}else{
if(dom.nodeType==3){
lst.push(_410(dom.nodeValue));
}
}
}
}
return lst;
},scrapeText:function(node,_41a){
var rval=[];
(function(node){
var cn=node.childNodes;
if(cn){
for(var i=0;i<cn.length;i++){
arguments.callee.call(this,cn[i]);
}
}
var _41f=node.nodeValue;
if(typeof (_41f)=="string"){
rval.push(_41f);
}
})(MochiKit.DOM.getElement(node));
if(_41a){
return rval;
}else{
return rval.join("");
}
},removeEmptyTextNodes:function(_420){
_420=MochiKit.DOM.getElement(_420);
for(var i=0;i<_420.childNodes.length;i++){
var node=_420.childNodes[i];
if(node.nodeType==3&&!/\S/.test(node.nodeValue)){
node.parentNode.removeChild(node);
}
}
},getFirstElementByTagAndClassName:function(_423,_424,_425){
var self=MochiKit.DOM;
if(typeof (_423)=="undefined"||_423===null){
_423="*";
}
if(typeof (_425)=="undefined"||_425===null){
_425=self._document;
}
_425=self.getElement(_425);
if(_425==null){
return null;
}
var _427=(_425.getElementsByTagName(_423)||self._document.all);
if(_427.length<=0){
return null;
}else{
if(typeof (_424)=="undefined"||_424===null){
return _427[0];
}
}
for(var i=0;i<_427.length;i++){
var _429=_427[i];
var cls=_429.className;
if(typeof (cls)!="string"){
cls=_429.getAttribute("class");
}
if(typeof (cls)=="string"){
var _42b=cls.split(" ");
for(var j=0;j<_42b.length;j++){
if(_42b[j]==_424){
return _429;
}
}
}
}
return null;
},getFirstParentByTagAndClassName:function(elem,_42e,_42f){
var self=MochiKit.DOM;
elem=self.getElement(elem);
if(typeof (_42e)=="undefined"||_42e===null){
_42e="*";
}else{
_42e=_42e.toUpperCase();
}
if(typeof (_42f)=="undefined"||_42f===null){
_42f=null;
}
if(elem){
elem=elem.parentNode;
}
while(elem&&elem.tagName){
var _431=elem.tagName.toUpperCase();
if((_42e==="*"||_42e==_431)&&(_42f===null||self.hasElementClass(elem,_42f))){
return elem;
}
elem=elem.parentNode;
}
return null;
},__new__:function(win){
var m=MochiKit.Base;
if(typeof (document)!="undefined"){
this._document=document;
var _434="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
this._xhtml=(document.documentElement&&document.createElementNS&&document.documentElement.namespaceURI===_434);
}else{
if(MochiKit.MockDOM){
this._document=MochiKit.MockDOM.document;
}
}
this._window=win;
this.domConverters=new m.AdapterRegistry();
var _435=this._document.createElement("span");
var _436;
if(_435&&_435.attributes&&_435.attributes.length>0){
var _437=m.filter;
_436=function(node){
return _437(_436.ignoreAttrFilter,node.attributes);
};
_436.ignoreAttr={};
var _439=_435.attributes;
var _43a=_436.ignoreAttr;
for(var i=0;i<_439.length;i++){
var a=_439[i];
_43a[a.name]=a.value;
}
_436.ignoreAttrFilter=function(a){
return (_436.ignoreAttr[a.name]!=a.value);
};
_436.compliant=false;
_436.renames={"class":"className","checked":"defaultChecked","usemap":"useMap","for":"htmlFor","readonly":"readOnly","colspan":"colSpan","rowspan":"rowSpan","bgcolor":"bgColor","cellspacing":"cellSpacing","cellpadding":"cellPadding"};
}else{
_436=function(node){
return node.attributes;
};
_436.compliant=true;
_436.ignoreAttr={};
_436.renames={};
}
_436.__export__=false;
this.attributeArray=_436;
m._deprecated(this,"computedStyle","MochiKit.Style.getStyle","1.4",true);
m._deprecated(this,"elementDimensions","MochiKit.Style.getElementDimensions","1.4");
m._deprecated(this,"elementPosition","MochiKit.Style.getElementPosition","1.4");
m._deprecated(this,"getViewportDimensions","MochiKit.Style.getViewportDimensions","1.4");
m._deprecated(this,"hideElement","MochiKit.Style.hideElement","1.4");
m._deprecated(this,"makeClipping","MochiKit.Style.makeClipping","1.4.1");
m._deprecated(this,"makePositioned","MochiKit.Style.makePositioned","1.4.1");
m._deprecated(this,"setElementDimensions","MochiKit.Style.setElementDimensions","1.4");
m._deprecated(this,"setElementPosition","MochiKit.Style.setElementPosition","1.4");
m._deprecated(this,"setDisplayForElement","MochiKit.Style.setDisplayForElement","1.4");
m._deprecated(this,"setOpacity","MochiKit.Style.setOpacity","1.4");
m._deprecated(this,"showElement","MochiKit.Style.showElement","1.4");
m._deprecated(this,"undoClipping","MochiKit.Style.undoClipping","1.4.1");
m._deprecated(this,"undoPositioned","MochiKit.Style.undoPositioned","1.4.1");
m._deprecated(this,"Coordinates","MochiKit.Style.Coordinates","1.4");
m._deprecated(this,"Dimensions","MochiKit.Style.Dimensions","1.4");
var _43f=this.createDOMFunc;
this.A=_43f("a");
this.ARTICLE=_43f("article");
this.ASIDE=_43f("aside");
this.BR=_43f("br");
this.BUTTON=_43f("button");
this.CANVAS=_43f("canvas");
this.CAPTION=_43f("caption");
this.DD=_43f("dd");
this.DIV=_43f("div");
this.DL=_43f("dl");
this.DT=_43f("dt");
this.FIELDSET=_43f("fieldset");
this.FIGURE=_43f("figure");
this.FIGCAPTION=_43f("figcaption");
this.FOOTER=_43f("footer");
this.FORM=_43f("form");
this.H1=_43f("h1");
this.H2=_43f("h2");
this.H3=_43f("h3");
this.H4=_43f("h4");
this.H5=_43f("h5");
this.H6=_43f("h6");
this.HEADER=_43f("header");
this.HGROUP=_43f("hgroup");
this.HR=_43f("hr");
this.IFRAME=_43f("iframe");
this.IMG=_43f("img");
this.INPUT=_43f("input");
this.LABEL=_43f("label");
this.LEGEND=_43f("legend");
this.LI=_43f("li");
this.LINK=_43f("link");
this.MARK=_43f("mark");
this.METER=_43f("meter");
this.NAV=_43f("nav");
this.OL=_43f("ol");
this.OPTGROUP=_43f("optgroup");
this.OPTION=_43f("option");
this.P=_43f("p");
this.PRE=_43f("pre");
this.PROGRESS=_43f("progress");
this.SCRIPT=_43f("script");
this.SECTION=_43f("section");
this.SELECT=_43f("select");
this.SPAN=_43f("span");
this.STRONG=_43f("strong");
this.STYLE=_43f("style");
this.TABLE=_43f("table");
this.TBODY=_43f("tbody");
this.TD=_43f("td");
this.TEXTAREA=_43f("textarea");
this.TFOOT=_43f("tfoot");
this.TH=_43f("th");
this.THEAD=_43f("thead");
this.TR=_43f("tr");
this.TT=_43f("tt");
this.UL=_43f("ul");
this.NBSP="\xa0";
this.$=this.getElement;
m.nameFunctions(this);
}});
MochiKit.DOM.__new__(((typeof (window)=="undefined")?this:window));
if(MochiKit.__export__){
withWindow=MochiKit.DOM.withWindow;
withDocument=MochiKit.DOM.withDocument;
}
MochiKit.Base._exportSymbols(this,MochiKit.DOM);
MochiKit.Base.module(MochiKit,"Signal","1.5",["Base","DOM"]);
MochiKit.Signal._observers=[];
MochiKit.Signal.Event=function(src,e){
this._event=e||window.event;
this._src=src;
};
MochiKit.Signal.Event.__export__=false;
MochiKit.Base.update(MochiKit.Signal.Event.prototype,{__repr__:function(){
var repr=MochiKit.Base.repr;
var str="{event(): "+repr(this.event())+", src(): "+repr(this.src())+", type(): "+repr(this.type())+", target(): "+repr(this.target());
if(this.type()&&this.type().indexOf("key")===0||this.type().indexOf("mouse")===0||this.type().indexOf("click")!=-1||this.type()=="contextmenu"){
str+=", modifier(): "+"{alt: "+repr(this.modifier().alt)+", ctrl: "+repr(this.modifier().ctrl)+", meta: "+repr(this.modifier().meta)+", shift: "+repr(this.modifier().shift)+", any: "+repr(this.modifier().any)+"}";
}
if(this.type()&&this.type().indexOf("key")===0){
str+=", key(): {code: "+repr(this.key().code)+", string: "+repr(this.key().string)+"}";
}
if(this.type()&&(this.type().indexOf("mouse")===0||this.type().indexOf("click")!=-1||this.type()=="contextmenu")){
str+=", mouse(): {page: "+repr(this.mouse().page)+", client: "+repr(this.mouse().client);
if(this.type()!="mousemove"&&this.type()!="mousewheel"){
str+=", button: {left: "+repr(this.mouse().button.left)+", middle: "+repr(this.mouse().button.middle)+", right: "+repr(this.mouse().button.right)+"}";
}
if(this.type()=="mousewheel"){
str+=", wheel: "+repr(this.mouse().wheel);
}
str+="}";
}
if(this.type()=="mouseover"||this.type()=="mouseout"||this.type()=="mouseenter"||this.type()=="mouseleave"){
str+=", relatedTarget(): "+repr(this.relatedTarget());
}
str+="}";
return str;
},toString:function(){
return this.__repr__();
},src:function(){
return this._src;
},event:function(){
return this._event;
},type:function(){
if(this._event.type==="DOMMouseScroll"){
return "mousewheel";
}else{
return this._event.type||undefined;
}
},target:function(){
return this._event.target||this._event.srcElement;
},_relatedTarget:null,relatedTarget:function(){
if(this._relatedTarget!==null){
return this._relatedTarget;
}
var elem=null;
if(this.type()=="mouseover"||this.type()=="mouseenter"){
elem=(this._event.relatedTarget||this._event.fromElement);
}else{
if(this.type()=="mouseout"||this.type()=="mouseleave"){
elem=(this._event.relatedTarget||this._event.toElement);
}
}
try{
if(elem!==null&&elem.nodeType!==null){
this._relatedTarget=elem;
return elem;
}
}
catch(ignore){
}
return undefined;
},_modifier:null,modifier:function(){
if(this._modifier!==null){
return this._modifier;
}
var m={};
m.alt=this._event.altKey;
m.ctrl=this._event.ctrlKey;
m.meta=this._event.metaKey||false;
m.shift=this._event.shiftKey;
m.any=m.alt||m.ctrl||m.shift||m.meta;
this._modifier=m;
return m;
},_key:null,key:function(){
if(this._key!==null){
return this._key;
}
var k={};
if(this.type()&&this.type().indexOf("key")===0){
if(this.type()=="keydown"||this.type()=="keyup"){
k.code=this._event.keyCode;
k.string=(MochiKit.Signal._specialKeys[k.code]||"KEY_UNKNOWN");
this._key=k;
return k;
}else{
if(this.type()=="keypress"){
k.code=0;
k.string="";
if(typeof (this._event.charCode)!="undefined"&&this._event.charCode!==0&&!MochiKit.Signal._specialMacKeys[this._event.charCode]){
k.code=this._event.charCode;
k.string=String.fromCharCode(k.code);
}else{
if(this._event.keyCode&&typeof (this._event.charCode)=="undefined"){
k.code=this._event.keyCode;
k.string=String.fromCharCode(k.code);
}
}
this._key=k;
return k;
}
}
}
return undefined;
},_mouse:null,mouse:function(){
if(this._mouse!==null){
return this._mouse;
}
var m={};
var e=this._event;
if(this.type()&&(this.type().indexOf("mouse")===0||this.type().indexOf("drag")===0||this.type().indexOf("click")!=-1||this.type()=="contextmenu")){
m.client={x:0,y:0};
if(e.clientX||e.clientY){
m.client.x=(!e.clientX||e.clientX<0)?0:e.clientX;
m.client.y=(!e.clientY||e.clientY<0)?0:e.clientY;
}
m.page={x:0,y:0};
if(e.pageX||e.pageY){
m.page.x=(!e.pageX||e.pageX<0)?0:e.pageX;
m.page.y=(!e.pageY||e.pageY<0)?0:e.pageY;
}else{
var de=MochiKit.DOM._document.documentElement;
var b=MochiKit.DOM._document.body;
m.page.x=e.clientX+(de.scrollLeft||b.scrollLeft)-(de.clientLeft||0);
m.page.y=e.clientY+(de.scrollTop||b.scrollTop)-(de.clientTop||0);
}
if(this.type()!="mousemove"&&this.type()!="mousewheel"){
m.button={};
m.button.left=false;
m.button.right=false;
m.button.middle=false;
if(e.which){
m.button.left=(e.which==1);
m.button.middle=(e.which==2);
m.button.right=(e.which==3);
}else{
m.button.left=!!(e.button&1);
m.button.right=!!(e.button&2);
m.button.middle=!!(e.button&4);
}
}
if(this.type()=="mousewheel"){
m.wheel={x:0,y:0};
if(e.wheelDeltaX||e.wheelDeltaY){
m.wheel.x=e.wheelDeltaX/-40||0;
m.wheel.y=e.wheelDeltaY/-40||0;
}else{
if(e.wheelDelta){
m.wheel.y=e.wheelDelta/-40;
}else{
m.wheel.y=e.detail||0;
}
}
}
this._mouse=m;
return m;
}
return undefined;
},stop:function(){
this.stopPropagation();
this.preventDefault();
},stopPropagation:function(){
if(this._event.stopPropagation){
this._event.stopPropagation();
}else{
this._event.cancelBubble=true;
}
},preventDefault:function(){
if(this._event.preventDefault){
this._event.preventDefault();
}else{
if(this._confirmUnload===null){
this._event.returnValue=false;
}
}
},_confirmUnload:null,confirmUnload:function(msg){
if(this.type()=="beforeunload"){
this._confirmUnload=msg;
this._event.returnValue=msg;
}
}});
MochiKit.Signal._specialMacKeys={3:"KEY_ENTER",63289:"KEY_NUM_PAD_CLEAR",63276:"KEY_PAGE_UP",63277:"KEY_PAGE_DOWN",63275:"KEY_END",63273:"KEY_HOME",63234:"KEY_ARROW_LEFT",63232:"KEY_ARROW_UP",63235:"KEY_ARROW_RIGHT",63233:"KEY_ARROW_DOWN",63302:"KEY_INSERT",63272:"KEY_DELETE"};
(function(){
var _5c4=MochiKit.Signal._specialMacKeys;
for(var i=63236;i<=63242;i++){
_5c4[i]="KEY_F"+(i-63236+1);
}
})();
MochiKit.Signal._specialKeys={8:"KEY_BACKSPACE",9:"KEY_TAB",12:"KEY_NUM_PAD_CLEAR",13:"KEY_ENTER",16:"KEY_SHIFT",17:"KEY_CTRL",18:"KEY_ALT",19:"KEY_PAUSE",20:"KEY_CAPS_LOCK",27:"KEY_ESCAPE",32:"KEY_SPACEBAR",33:"KEY_PAGE_UP",34:"KEY_PAGE_DOWN",35:"KEY_END",36:"KEY_HOME",37:"KEY_ARROW_LEFT",38:"KEY_ARROW_UP",39:"KEY_ARROW_RIGHT",40:"KEY_ARROW_DOWN",44:"KEY_PRINT_SCREEN",45:"KEY_INSERT",46:"KEY_DELETE",59:"KEY_SEMICOLON",91:"KEY_WINDOWS_LEFT",92:"KEY_WINDOWS_RIGHT",93:"KEY_SELECT",106:"KEY_NUM_PAD_ASTERISK",107:"KEY_NUM_PAD_PLUS_SIGN",109:"KEY_NUM_PAD_HYPHEN-MINUS",110:"KEY_NUM_PAD_FULL_STOP",111:"KEY_NUM_PAD_SOLIDUS",144:"KEY_NUM_LOCK",145:"KEY_SCROLL_LOCK",186:"KEY_SEMICOLON",187:"KEY_EQUALS_SIGN",188:"KEY_COMMA",189:"KEY_HYPHEN-MINUS",190:"KEY_FULL_STOP",191:"KEY_SOLIDUS",192:"KEY_GRAVE_ACCENT",219:"KEY_LEFT_SQUARE_BRACKET",220:"KEY_REVERSE_SOLIDUS",221:"KEY_RIGHT_SQUARE_BRACKET",222:"KEY_APOSTROPHE"};
(function(){
var _5c6=MochiKit.Signal._specialKeys;
for(var i=48;i<=57;i++){
_5c6[i]="KEY_"+(i-48);
}
for(i=65;i<=90;i++){
_5c6[i]="KEY_"+String.fromCharCode(i);
}
for(i=96;i<=105;i++){
_5c6[i]="KEY_NUM_PAD_"+(i-96);
}
for(i=112;i<=123;i++){
_5c6[i]="KEY_F"+(i-112+1);
}
})();
MochiKit.Signal.Ident=function(_5c8){
this.source=_5c8.source;
this.signal=_5c8.signal;
this.listener=_5c8.listener;
this.isDOM=_5c8.isDOM;
this.objOrFunc=_5c8.objOrFunc;
this.funcOrStr=_5c8.funcOrStr;
this.connected=_5c8.connected;
};
MochiKit.Signal.Ident.__export__=false;
MochiKit.Signal.Ident.prototype={};
MochiKit.Base.update(MochiKit.Signal,{_unloadCache:function(){
var self=MochiKit.Signal;
var _5ca=self._observers;
for(var i=0;i<_5ca.length;i++){
if(_5ca[i].signal!=="onload"&&_5ca[i].signal!=="onunload"){
self._disconnect(_5ca[i]);
}
}
},_listener:function(src,sig,func,obj,_5d0){
var self=MochiKit.Signal;
var E=self.Event;
if(!_5d0){
if(typeof (func.im_self)=="undefined"){
return MochiKit.Base.bindLate(func,obj);
}else{
return func;
}
}
obj=obj||src;
if(typeof (func)=="string"){
if(sig==="onload"||sig==="onunload"){
return function(_5d3){
obj[func].apply(obj,[new E(src,_5d3)]);
var _5d4=new MochiKit.Signal.Ident({source:src,signal:sig,objOrFunc:obj,funcOrStr:func});
MochiKit.Signal._disconnect(_5d4);
};
}else{
return function(_5d5){
obj[func].apply(obj,[new E(src,_5d5)]);
};
}
}else{
if(sig==="onload"||sig==="onunload"){
return function(_5d6){
func.apply(obj,[new E(src,_5d6)]);
var _5d7=new MochiKit.Signal.Ident({source:src,signal:sig,objOrFunc:func});
MochiKit.Signal._disconnect(_5d7);
};
}else{
return function(_5d8){
func.apply(obj,[new E(src,_5d8)]);
};
}
}
},_browserAlreadyHasMouseEnterAndLeave:function(){
return /MSIE/.test(navigator.userAgent);
},_browserLacksMouseWheelEvent:function(){
return /Gecko\//.test(navigator.userAgent);
},_mouseEnterListener:function(src,sig,func,obj){
var E=MochiKit.Signal.Event;
return function(_5de){
var e=new E(src,_5de);
try{
e.relatedTarget().nodeName;
}
catch(err){
return;
}
e.stop();
if(MochiKit.DOM.isChildNode(e.relatedTarget(),src)){
return;
}
e.type=function(){
return sig;
};
if(typeof (func)=="string"){
return obj[func].apply(obj,[e]);
}else{
return func.apply(obj,[e]);
}
};
},_getDestPair:function(_5e0,_5e1){
var obj=null;
var func=null;
if(typeof (_5e1)!="undefined"){
obj=_5e0;
func=_5e1;
if(typeof (_5e1)=="string"){
if(typeof (_5e0[_5e1])!="function"){
throw new Error("'funcOrStr' must be a function on 'objOrFunc'");
}
}else{
if(typeof (_5e1)!="function"){
throw new Error("'funcOrStr' must be a function or string");
}
}
}else{
if(typeof (_5e0)!="function"){
throw new Error("'objOrFunc' must be a function if 'funcOrStr' is not given");
}else{
func=_5e0;
}
}
return [obj,func];
},connect:function(src,sig,_5e6,_5e7){
if(typeof (src)=="string"){
src=MochiKit.DOM.getElement(src);
}
var self=MochiKit.Signal;
if(typeof (sig)!="string"){
throw new Error("'sig' must be a string");
}
var _5e9=self._getDestPair(_5e6,_5e7);
var obj=_5e9[0];
var func=_5e9[1];
if(typeof (obj)=="undefined"||obj===null){
obj=src;
}
var _5ec=!!(src.addEventListener||src.attachEvent);
if(_5ec&&(sig==="onmouseenter"||sig==="onmouseleave")&&!self._browserAlreadyHasMouseEnterAndLeave()){
var _5ed=self._mouseEnterListener(src,sig.substr(2),func,obj);
if(sig==="onmouseenter"){
sig="onmouseover";
}else{
sig="onmouseout";
}
}else{
if(_5ec&&sig=="onmousewheel"&&self._browserLacksMouseWheelEvent()){
var _5ed=self._listener(src,sig,func,obj,_5ec);
sig="onDOMMouseScroll";
}else{
var _5ed=self._listener(src,sig,func,obj,_5ec);
}
}
if(src.addEventListener){
src.addEventListener(sig.substr(2),_5ed,false);
}else{
if(src.attachEvent){
src.attachEvent(sig,_5ed);
}
}
var _5ee=new MochiKit.Signal.Ident({source:src,signal:sig,listener:_5ed,isDOM:_5ec,objOrFunc:_5e6,funcOrStr:_5e7,connected:true});
self._observers.push(_5ee);
if(!_5ec&&typeof (src.__connect__)=="function"){
var args=MochiKit.Base.extend([_5ee],arguments,1);
src.__connect__.apply(src,args);
}
return _5ee;
},connectOnce:function(src,sig,_5f2,_5f3){
var self=MochiKit.Signal;
var _5f5=self.connect(src,sig,_5f2,_5f3);
var _5f6;
_5f6=self.connect(src,sig,function(){
self.disconnect(_5f5);
self.disconnect(_5f6);
});
return _5f5;
},_disconnect:function(_5f7){
if(!_5f7.connected){
return;
}
_5f7.connected=false;
var src=_5f7.source;
var sig=_5f7.signal;
var _5fa=_5f7.listener;
if(!_5f7.isDOM){
if(typeof (src.__disconnect__)=="function"){
src.__disconnect__(_5f7,sig,_5f7.objOrFunc,_5f7.funcOrStr);
}
return;
}
if(src.removeEventListener){
src.removeEventListener(sig.substr(2),_5fa,false);
}else{
if(src.detachEvent){
src.detachEvent(sig,_5fa);
}else{
throw new Error("'src' must be a DOM element");
}
}
},disconnect:function(_5fb){
var self=MochiKit.Signal;
var _5fd=self._observers;
var m=MochiKit.Base;
if(arguments.length>1){
var src=arguments[0];
if(typeof (src)=="string"){
src=MochiKit.DOM.getElement(src);
}
var sig=arguments[1];
var obj=arguments[2];
var func=arguments[3];
for(var i=_5fd.length-1;i>=0;i--){
var o=_5fd[i];
if(o.source===src&&o.signal===sig&&o.objOrFunc===obj&&o.funcOrStr===func){
self._disconnect(o);
if(self._lock===0){
_5fd.splice(i,1);
}else{
self._dirty=true;
}
return true;
}
}
}else{
var idx=m.findIdentical(_5fd,_5fb);
if(idx>=0){
self._disconnect(_5fb);
if(self._lock===0){
_5fd.splice(idx,1);
}else{
self._dirty=true;
}
return true;
}
}
return false;
},disconnectAllTo:function(_606,_607){
var self=MochiKit.Signal;
var _609=self._observers;
var _60a=self._disconnect;
var lock=self._lock;
var _60c=self._dirty;
if(typeof (_607)==="undefined"){
_607=null;
}
for(var i=_609.length-1;i>=0;i--){
var _60e=_609[i];
if(_60e.objOrFunc===_606&&(_607===null||_60e.funcOrStr===_607)){
_60a(_60e);
if(lock===0){
_609.splice(i,1);
}else{
_60c=true;
}
}
}
self._dirty=_60c;
},disconnectAll:function(src,sig){
if(typeof (src)=="string"){
src=MochiKit.DOM.getElement(src);
}
var m=MochiKit.Base;
var _612=m.flattenArguments(m.extend(null,arguments,1));
var self=MochiKit.Signal;
var _614=self._disconnect;
var _615=self._observers;
var i,_617;
var lock=self._lock;
var _619=self._dirty;
if(_612.length===0){
for(i=_615.length-1;i>=0;i--){
_617=_615[i];
if(_617.source===src){
_614(_617);
if(lock===0){
_615.splice(i,1);
}else{
_619=true;
}
}
}
}else{
var sigs={};
for(i=0;i<_612.length;i++){
sigs[_612[i]]=true;
}
for(i=_615.length-1;i>=0;i--){
_617=_615[i];
if(_617.source===src&&_617.signal in sigs){
_614(_617);
if(lock===0){
_615.splice(i,1);
}else{
_619=true;
}
}
}
}
self._dirty=_619;
},signal:function(src,sig){
var self=MochiKit.Signal;
var _61e=self._observers;
if(typeof (src)=="string"){
src=MochiKit.DOM.getElement(src);
}
var args=MochiKit.Base.extend(null,arguments,2);
var _620=[];
self._lock++;
for(var i=0;i<_61e.length;i++){
var _622=_61e[i];
if(_622.source===src&&_622.signal===sig&&_622.connected){
try{
if(_622.isDOM&&_622.funcOrStr!=null){
var obj=_622.objOrFunc;
obj[_622.funcOrStr].apply(obj,args);
}else{
if(_622.isDOM){
_622.objOrFunc.apply(src,args);
}else{
_622.listener.apply(src,args);
}
}
}
catch(e){
_620.push(e);
}
}
}
self._lock--;
if(self._lock===0&&self._dirty){
self._dirty=false;
for(var i=_61e.length-1;i>=0;i--){
if(!_61e[i].connected){
_61e.splice(i,1);
}
}
}
if(_620.length==1){
throw _620[0];
}else{
if(_620.length>1){
var e=new Error("Multiple errors thrown in handling 'sig', see errors property");
e.errors=_620;
throw e;
}
}
}});
MochiKit.Signal.__new__=function(win){
var m=MochiKit.Base;
this._document=document;
this._window=win;
this._lock=0;
this._dirty=false;
try{
this.connect(window,"onunload",this._unloadCache);
}
catch(e){
}
m.nameFunctions(this);
};
MochiKit.Signal.__new__(this);
if(MochiKit.__export__){
connect=MochiKit.Signal.connect;
disconnect=MochiKit.Signal.disconnect;
disconnectAll=MochiKit.Signal.disconnectAll;
signal=MochiKit.Signal.signal;
}
MochiKit.Base._exportSymbols(this,MochiKit.Signal);

undefined;